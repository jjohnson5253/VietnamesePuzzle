#!/usr/bin/env python3
from multiprocessing.pool import Pool
import time

#Calculate time
start = time.time()

#function to find permutations of digits 1-9
def findPerms(ranges):
	#create list to store permutations
	permutations = []

	#find start and end numbers to count to from input
	start = ranges[0]
	end = ranges[1]

	#go thru all numbers and include those with no zeros or duplicates
	for num in range(start,end):
		strNum = str(num)
		checks = {}
		breakOut = False
		for digit in strNum:
			if(digit=='0'):
				breakOut = True
				break
			elif digit in checks:
				breakOut = True
				break
			else:
				checks[digit]=1
		if(breakOut == False):
			permutations.append(strNum)

	return permutations

#use this function to plug in guesses to the Vietnamese equation
def calculate(num):

	answer = int(num[0])+((13*int(num[1]))/int(num[2]))+int(num[3])+(12*int(num[4]))-int(num[5])-11+((int(num[6])*int(num[7]))/int(num[8])-10)

	if(answer==66):
		answers.append(num)

#Create ranges based off how many CPUs are available
cpuCount = 4
increment = round((987654321-123456789)/cpuCount)
rangeVar = 123456789
ranges=[]
while(rangeVar<987654321):
	tmp=rangeVar
	rangeVar=rangeVar+increment

	if(rangeVar==987654321):
		rangeVar=987654322

	ranges.append([tmp,rangeVar])

#big permutation list that holds the permutations generated by the pool
myPerms = []

#multiprocessing pool
with Pool(processes=4) as pool:
	for perms in pool.map(findPerms,ranges):
		myPerms.extend(perms)


#list to store answers to Vietnemese equation
answers = []

#plug in all the permutations and see which ones work
for num in myPerms:
	calculate(num)

#write the permutations and answers to seperate files
a = open('answers.txt','w')
p = open('permutations.txt','w')
for num in myPerms:
	p.write(num + "\n")
for ans in answers:
	a.write(ans + "\n")

#calculate time
print(time.time()-start)